version: '3'

networks:
  sigo-net:
    driver: bridge
    ipam:
     config:
       - subnet: 10.5.0.0/16

services:
  #--------------------------------------------------------------------------
  # Sigo Frontend - User Interface
  #--------------------------------------------------------------------------

  reactapp:
    container_name: reactapp
    build: ./Frontend
    image: reactapp:1.0
    ports:
      - 8084:80
    volumes:
      - ./Frontend:/app
    environment:
      - NODE_ENV=development
    networks:
      sigo-net:
        ipv4_address: 10.5.0.2

  #--------------------------------------------------------------------------
  # Sigo Microservices
  #--------------------------------------------------------------------------

  users:
    container_name: users
    build: Microservices/sigoms-users
    image: users:1.0
    ports:
      - 444:443
      - 8081:80
      - 9001:9000
    env_file:
      - ./Microservices/sigoms-users/.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      JWT_PASSPHRASE: ${JWT_PASSPHRASE}
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN}
    volumes:
      - ./Microservices/sigoms-users:/app
    networks:
      sigo-net:
        ipv4_address: 10.5.0.3

  db_users:
    container_name: db_users
    image: postgres:latest
    ports:
      - 15432:5432
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${USERS_POSTGRES_DB}
      POSTGRES_USER: ${USERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USERS_POSTGRES_PASSWORD}
    networks:
      sigo-net:
        ipv4_address: 10.5.0.4

  gpindustrial:
    container_name: gpindustrial
    build: Microservices/sigoms-gpindustrial
    image: gpindustrial:1.0
    ports:
      - 446:443
      - 8082:80
      - 9002:9000
      - 3001:3001
    volumes:
      - ./Microservices/sigoms-gpindustrial:/app
    networks:
      sigo-net:
        ipv4_address: 10.5.0.5

  #--------------------------------------------------------------------------
  # Message Broker RabbitMQ
  #--------------------------------------------------------------------------

  rabbitmq:
    container_name: rabbitmq
    build: RabbitMQ
    image: rabbitmq:1.0
    ports:
      - 15672:15672
    volumes:
      - ./RabbitMQ/config/definitions.json:/opt/definitions.json
      - ./RabbitMQ/config/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
    networks:
      sigo-net:
        ipv4_address: 10.5.0.6

  #--------------------------------------------------------------------------
  # Kong API Gateway
  #--------------------------------------------------------------------------

  kong-migrations:
    container_name: kong_migrations
    image: kong:latest
    command: kong migrations bootstrap
    depends_on:
      - db_kong
    env_file:
      - ./.env
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db_kong
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    networks:
      sigo-net:
        ipv4_address: 10.5.0.7
    restart: on-failure

  kong:
    container_name: kong
    image: kong:latest
    user: ${KONG_USER:-kong}
    depends_on:
      - db_kong
    env_file:
      - ./.env
    environment:
      KONG_CASSANDRA_CONTACT_POINTS: ${KONG_CASSANDRA_CONTACT_POINTS}
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: db_kong
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
      KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG}
      KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG}
      KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG}
      KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG}
    networks:
      sigo-net:
        ipv4_address: 10.5.0.8
    ports:
      - 8000:8000/tcp
      - 127.0.0.1:8001:8001/tcp
      - 8443:8443/tcp
      - 127.0.0.1:8444:8444/tcp
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  db_kong:
    container_name: db_kong
    image: postgres:latest
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE}
      POSTGRES_USER: ${KONG_PG_USER}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      sigo-net:
        ipv4_address: 10.5.0.9

  #--------------------------------------------------------------------------
  # Legacy application simulation
  #--------------------------------------------------------------------------

  simulacao:
    container_name: simulacao
    build: ../sigo-simulacao
    image: simulacao:1.0
    ports:
      - 449:443
      - 8089:80
      - 9009:9000
    volumes:
      - ../sigo-simulacao/:/app
    networks:
      sigo-net:
        ipv4_address: 10.5.0.10